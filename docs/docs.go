// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/food_categories": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get recipe list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Province"
                ],
                "summary": "Get recipe list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search conditions",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by fields",
                        "name": "sorts",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the page of results to return",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Specify the number of records to return in one request",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helpers.HTTPList"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Recipe"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new recipe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Province"
                ],
                "summary": "Create new recipe",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            }
        },
        "/api/food_categories/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get recipe by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Province"
                ],
                "summary": "Get recipe by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Province ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPNotFound"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update recipe by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Province"
                ],
                "summary": "Update recipe by id",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete recipe by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Province"
                ],
                "summary": "Delete recipe by id",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPDeleted"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            }
        },
        "/api/setting": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get current setting",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SettingShort"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update current setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Update current setting",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SettingShort"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SettingShort"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPForbidden"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helpers.HTTPBadRequest": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 400
                        },
                        "message": {
                            "type": "string",
                            "example": "Field xxx wajib diisi."
                        }
                    }
                }
            }
        },
        "helpers.HTTPDeleted": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Data dengan id = '6e8ef30f-c443-48b7-89e4-964c207245d9' berhasil dihapus."
                }
            }
        },
        "helpers.HTTPForbidden": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 403
                        },
                        "message": {
                            "type": "string",
                            "example": "Pengguna tidak memiliki cukup izin untuk mengakses sumber daya."
                        }
                    }
                }
            }
        },
        "helpers.HTTPList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "page_context": {
                    "type": "object",
                    "properties": {
                        "page": {
                            "type": "integer",
                            "example": 1
                        },
                        "per_page": {
                            "type": "integer",
                            "example": 10
                        },
                        "total_pages": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                },
                "results": {}
            }
        },
        "helpers.HTTPNotFound": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 404
                        },
                        "message": {
                            "type": "string",
                            "example": "Data dengan id = '6e8ef30f-c443-48b7-89e4-964c207245d9' tidak ditemukan."
                        }
                    }
                }
            }
        },
        "helpers.HTTPUnauthorized": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 401
                        },
                        "message": {
                            "type": "string",
                            "example": "Token otentikasi tidak valid."
                        }
                    }
                }
            }
        },
        "models.FoodCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                },
                "id": {
                    "type": "integer",
                    "example": 115
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "Kota Depok"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                }
            }
        },
        "models.FoodCategoryShort": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Ingridient": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                },
                "id": {
                    "type": "integer",
                    "example": 115
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "unit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                }
            }
        },
        "models.IngridientShort": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "string"
                }
            }
        },
        "models.Recipe": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                },
                "food_category": {
                    "$ref": "#/definitions/models.FoodCategoryShort"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "ingridients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IngridientShort"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Jalur Nugraha Ekakurir (JNE)"
                },
                "quantity": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2020-03-16T13:55:09.598136+07:00"
                }
            }
        },
        "models.SettingShort": {
            "type": "object",
            "properties": {
                "db.migration.version": {
                    "type": "string",
                    "example": "0036"
                },
                "db.seed.version": {
                    "type": "string",
                    "example": "0011"
                },
                "origin_address.subdistrict.id": {
                    "type": "string",
                    "example": "222a761e-7dfc-4586-8f39-0d0fb59bb050"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "API Recipe Keeper",
	Description:      "API Recipe Keeper.\n\n## Query params\n\nBy default, we support a common way for selecting fields, filtering, searching, sorting, and pagination in URL query params on `GET` method:\n\n### Field\n\nGet selected fields in GET result, example:\n```\nGET /api/resources?fields=field_a,field_b,field_c\n```\nequivalent to sql:\n```sql\nSELECT field_a, field_b, field_c FROM resources\n```\n\n### Filter\n\nAdds fields request condition (multiple conditions) to the request, example:\n```\nGET /api/resources?field_a=value_a&field_b.$gte=value_b&field_c.$like=value_c&field_d.$ilike=value_d%\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources WHERE (field_a = 'value_a') AND (field_b >= value_b) AND (field_c LIKE '%value_c%') AND (LOWER(field_d) LIKE LOWER('value_d%'))\n```\n\n#### Available filter conditions\n\n* `$eq`: equal (`=`)\n* `$ne`: not equal (`!=`)\n* `$gt`: greater than (`>`)\n* `$gte`: greater than or equal (`>=`)\n* `$lt`: lower than (`<`)\n* `$lte`: lower than or equal (`<=`)\n* `$like`: contains (`LIKE '%value%'`)\n* `$ilike`: contains case insensitive (`LOWER(field) LIKE LOWER('%value%')`)\n* `$nlike`: not contains (`NOT LIKE '%value%'`)\n* `$nilike`: not contains case insensitive (`LOWER(field) NOT LIKE LOWER('%value%')`)\n* `$in`: in range, accepts multiple values (`IN ('value_a', 'value_b')`)\n* `$nin`: not in range, accepts multiple values (`NOT IN ('value_a', 'value_b')`)\n* `$regexp`: regex (`REGEXP '%value%'`)\n* `$nregexp`: not regex (`NOT REGEXP '%value%'`)\n\n### Or\n\nAdds `OR` conditions to the request, example:\n```\nGET /api/resources?or=field_a:val_a|field_b.$gte:val_b;field_c.$lte:val_c|field_d.$like:val_d\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources WHERE (field_a=val_a OR field_b <= val_b) AND (field_c <= val_c OR field_d LIKE '%val_d%')\n```\n\n### Search\n\nAdds a search conditions to the request, example:\n```\nGET /api/resources?search=field_a,field_b:term_1;field_c,field_d:term_2\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources WHERE (LOWER(field_a) LIKE LOWER('%term_1%') OR LOWER(field_b) LIKE LOWER('%term_1%')) AND (LOWER(field_c) LIKE LOWER('%term_2%') OR LOWER(field_d) LIKE LOWER('%term_2%'))\n```\n\n### Sort\n\nAdds sort by field (by multiple fields) and order to query result, example:\n```\nGET /api/resources?sorts=field_a,-field_b,field_c:i,-field_d:i\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources ORDER BY field_a ASC, field_b DESC, LOWER(field_c) ASC, LOWER(field_d) DESC\n```\n\n### Page\n\nSpecify the page of results to return, example:\n```\nGET /api/resources?page=3&per_page=10\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources LIMIT 10 OFFSET 20\n```\n\n### Per Page\n\nSpecify the number of records to return in one request, example:\n```\nGET /api/resources?per_page=10\n```\nequivalent to sql:\n```sql\nSELECT * FROM resources LIMIT 10\n```",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
